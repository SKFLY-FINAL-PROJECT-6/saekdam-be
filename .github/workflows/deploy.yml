name: EC2 배포 (SSM 이용)

on:
    push:
        branches:
            - main

permissions:
    id-token: write
    contents: read

jobs:
    deploy:
        runs-on: ubuntu-latest

        steps:
            - name: 리포지토리 체크아웃
              uses: actions/checkout@v3

            - name: AWS 자격 증명 설정
              uses: aws-actions/configure-aws-credentials@v3
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ secrets.AWS_REGION }}

            - name: EC2 환경 준비 (Docker, Java, Git 설치)
              run: |
                  aws ssm send-command \
                    --document-name "AWS-RunShellScript" \
                    --targets "Key=instanceIds,Values=${{ secrets.EC2_INSTANCE_ID }}" \
                    --parameters "{
                      \"commands\": [
                        \"sudo yum update -y\",
                        \"sudo yum install -y docker docker-compose-plugin java-17-amazon-corretto git\",
                        \"sudo systemctl start docker\",
                        \"sudo systemctl enable docker\",
                        \"sudo usermod -aG docker ec2-user\",
                        \"mkdir -p /home/ec2-user\"
                      ]
                    }"

            - name: 전체 삭제 및 삭제 확인
              run: |
                  aws ssm send-command \
                    --document-name "AWS-RunShellScript" \
                    --targets "Key=instanceIds,Values=${{ secrets.EC2_INSTANCE_ID }}" \
                    --parameters "{
                      \"commands\": [
                        \"sudo rm -rf /home/ec2-user/app\",
                        \"sudo rm -rf /home/ec2-user/.gradle\",
                        \"ls -la /home/ec2-user\"
                      ]
                    }"

            - name: 새 클론 및 처음부터 빌드, 배포
              run: |
                  aws ssm send-command \
                    --document-name "AWS-RunShellScript" \
                    --targets "Key=instanceIds,Values=${{ secrets.EC2_INSTANCE_ID }}" \
                    --parameters "{
                      \"commands\": [
                        \"git clone https://github.com/typingmistake/saekdam-be.git /home/ec2-user/app\",
                        \"cd /home/ec2-user/app\",
                        \"sudo chmod -R 777 /home/ec2-user/app\",
                        \"chmod +x gradlew\",
                        \"./gradlew clean build -x test --rerun-tasks\",
                        \"echo \\\"DB_HOST=${{ secrets.DB_HOST }}\\\" > .env\",
                        \"echo \\\"DB_PORT=${{ secrets.DB_PORT }}\\\" >> .env\",
                        \"echo \\\"DB_NAME=${{ secrets.DB_NAME }}\\\" >> .env\",
                        \"echo \\\"DB_USER=${{ secrets.DB_USER }}\\\" >> .env\",
                        \"echo \\\"DB_PASSWORD=${{ secrets.DB_PASSWORD }}\\\" >> .env\",
                        \"echo \\\"AWS_S3_ACCESS_KEY=${{ secrets.AWS_S3_ACCESS_KEY }}\\\" >> .env\",
                        \"echo \\\"AWS_S3_SECRET_KEY=${{ secrets.AWS_S3_SECRET_KEY }}\\\" >> .env\",
                        \"echo \\\"AWS_S3_REGION=${{ secrets.AWS_REGION }}\\\" >> .env\",
                        \"echo \\\"AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}\\\" >> .env\",
                        \"echo \\\"JWT_SECRET=${{ secrets.JWT_SECRET }}\\\" >> .env\",
                        \"sudo docker compose down\",
                        \"sudo docker compose --env-file .env up -d\"
                      ]
                    }"
