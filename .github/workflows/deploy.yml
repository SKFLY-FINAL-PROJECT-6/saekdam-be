name: Deploy to EC2 via SSM

on:
    push:
        branches:
            - main # main 브랜치에 push될 때 실행

permissions:
    id-token: write
    contents: read

jobs:
    deploy:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            # AWS 자격 증명 설정
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v2
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ secrets.AWS_REGION }}

            # AWS SSM을 통해 원격 배포 실행
            - name: Deploy and Check Docker Status via SSM
              run: |
                  COMMAND_ID=$(aws ssm send-command \
                    --document-name "AWS-RunShellScript" \
                    --targets "Key=instanceIds,Values=${{ secrets.EC2_INSTANCE_ID }}" \
                    --parameters commands='[
                      "echo ====== DEPLOY START ======",
                      "cd /home/ec2-user/app",
                      "echo ====== Pulling latest code ======",
                      "git pull origin main",
                      "echo ====== Building Spring Boot app ======",
                      "chmod +x gradlew",
                      "./gradlew clean build -x test",
                      "echo ====== Restarting Docker containers ======",
                      "docker-compose down",
                      "docker-compose up -d",
                      "echo ====== Waiting for MySQL to be ready ======",
                      "sleep 10",
                      "echo ====== Checking Docker Status ======",
                      "docker ps",
                      "echo ====== Checking Spring Boot Logs ======",
                      "docker logs --tail 20 app",
                      "echo ====== Checking MySQL Logs ======",
                      "docker logs --tail 20 mysql",
                      "echo ====== Checking Spring Boot API Health ======",
                      "curl -s -o /dev/null -w \"%{http_code}\" http://localhost:8080/actuator/health || echo Spring Boot is not responding"
                    ]' \
                    --comment "Deploy and check Docker status" \
                    --query "Command.CommandId" \
                    --output text)

                  echo "Waiting for SSM command to complete..."
                  aws ssm wait command-executed \
                    --command-id "$COMMAND_ID" \
                    --instance-id "${{ secrets.EC2_INSTANCE_ID }}"

                  echo "Fetching SSM Command Output..."
                  aws ssm get-command-invocation \
                    --command-id "$COMMAND_ID" \
                    --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
                    --query "StandardOutputContent" \
                    --output text

                  echo "Fetching SSM Command Error Output..."
                  aws ssm get-command-invocation \
                    --command-id "$COMMAND_ID" \
                    --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
                    --query "StandardErrorContent" \
                    --output text
