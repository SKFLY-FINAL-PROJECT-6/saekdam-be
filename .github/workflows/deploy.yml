name: EC2 배포 (SSM 이용)

on:
    push:
        branches:
            - main # main 브랜치에 push 시 실행

permissions:
    id-token: write
    contents: read

jobs:
    deploy:
        runs-on: ubuntu-latest

        steps:
            - name: 리포지토리 체크아웃
              uses: actions/checkout@v3

            - name: AWS 자격 증명 설정
              uses: aws-actions/configure-aws-credentials@v3
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ secrets.AWS_REGION }}

            # 1. EC2 환경 준비: Docker와 Java 설치 및 설정 (Docker Compose는 Docker에 내장됨)
            - name: EC2 환경 준비 (SSM 명령어 실행)
              run: |
                  echo "EC2 환경 준비 시작 (Docker 및 Java 설치)..."
                  COMMAND_ID=$(aws ssm send-command \
                    --document-name "AWS-RunShellScript" \
                    --targets "Key=instanceIds,Values=${{ secrets.EC2_INSTANCE_ID }}" \
                    --parameters commands='[
                      "echo ====== 필수 패키지 업데이트 ======",
                      "sudo yum update -y",
                      "echo ====== Docker와 Java 설치 ======",
                      "sudo yum install -y docker java-17-amazon-corretto",
                      "echo ====== Docker 서비스 시작 ======",
                      "sudo service docker start",
                      "echo ====== Docker 서비스 활성화 chkconfig ======",
                      "sudo chkconfig docker on || true",
                      "echo ====== docker 그룹 생성 및 ec2-user 권한 부여 ======",
                      "sudo groupadd docker || true",
                      "sudo usermod -aG docker ec2-user",
                      "echo ====== 작업 디렉토리 생성 ======",
                      "mkdir -p /home/ec2-user/app",
                      "sudo chown ec2-user:ec2-user /home/ec2-user/app",
                      "echo ====== Docker 버전 확인 ======",
                      "docker --version",
                      "echo ====== Docker Compose 버전 확인 (내장된 compose 사용) ======",
                      "docker compose version || true"
                    ]' \
                    --comment "EC2 환경 준비 (Docker, Java 설치)" \
                    --query "Command.CommandId" \
                    --output text)

                  echo "SSM 명령어 실행 ID: $COMMAND_ID"
                  echo "SSM 명령어 완료 대기 중..."
                  aws ssm wait command-executed \
                    --command-id "$COMMAND_ID" \
                    --instance-id "${{ secrets.EC2_INSTANCE_ID }}" || {
                      echo "EC2 환경 준비 명령어가 실패했습니다. 상세 로그:";
                      aws ssm get-command-invocation \
                        --command-id "$COMMAND_ID" \
                        --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
                        --output text;
                      exit 1;
                    }
                  echo "EC2 환경 준비 완료."

            # 2. 애플리케이션 배포 및 실행 (git pull, 빌드, Docker Compose 명령어 실행)
            - name: 애플리케이션 배포 및 실행 (SSM 명령어 실행)
              run: |
                  echo "애플리케이션 배포 시작..."
                  COMMAND_ID=$(aws ssm send-command \
                    --document-name "AWS-RunShellScript" \
                    --targets "Key=instanceIds,Values=${{ secrets.EC2_INSTANCE_ID }}" \
                    --parameters commands='[
                      "echo ====== 배포 시작 ======",
                      "cd /home/ec2-user/app",
                      "echo ====== 최신 코드 가져오기 ======",
                      "git pull origin main",
                      "echo ====== Spring Boot 애플리케이션 빌드 ======",
                      "chmod +x gradlew",
                      "./gradlew clean build -x test",
                      "echo ====== Docker Compose로 컨테이너 재시작 ======",
                      "sudo docker compose down",
                      "sudo docker compose up -d",
                      "echo ====== MySQL 준비 대기 ======",
                      "sleep 10"
                    ]' \
                    --comment "애플리케이션 배포 및 실행" \
                    --query "Command.CommandId" \
                    --output text)

                  echo "SSM 명령어 실행 ID: $COMMAND_ID"
                  echo "SSM 명령어 완료 대기 중..."
                  aws ssm wait command-executed \
                    --command-id "$COMMAND_ID" \
                    --instance-id "${{ secrets.EC2_INSTANCE_ID }}" || {
                      echo "애플리케이션 배포 명령어가 실패했습니다. 상세 로그:";
                      aws ssm get-command-invocation \
                        --command-id "$COMMAND_ID" \
                        --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
                        --output text;
                      exit 1;
                    }
                  echo "애플리케이션 배포 완료."

            # 3. Docker 상태 및 로그 확인
            - name: Docker 상태 및 로그 확인 (SSM 명령어 실행)
              run: |
                  echo "Docker 상태 및 로그 확인 시작..."
                  COMMAND_ID=$(aws ssm send-command \
                    --document-name "AWS-RunShellScript" \
                    --targets "Key=instanceIds,Values=${{ secrets.EC2_INSTANCE_ID }}" \
                    --parameters commands='[
                      "echo ====== Docker 컨테이너 상태 확인 ======",
                      "sudo docker ps",
                      "echo ====== app 컨테이너 로그 확인 ======",
                      "sudo docker compose logs app --tail 20",
                      "echo ====== mysql 컨테이너 로그 확인 ======",
                      "sudo docker compose logs mysql --tail 20"
                    ]' \
                    --comment "Docker 상태 및 로그 확인" \
                    --query "Command.CommandId" \
                    --output text)

                  echo "SSM 명령어 실행 ID: $COMMAND_ID"
                  echo "SSM 명령어 완료 대기 중..."
                  aws ssm wait command-executed \
                    --command-id "$COMMAND_ID" \
                    --instance-id "${{ secrets.EC2_INSTANCE_ID }}" || {
                      echo "Docker 상태 확인 명령어가 실패했습니다. 상세 로그:";
                      aws ssm get-command-invocation \
                        --command-id "$COMMAND_ID" \
                        --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
                        --output text;
                      exit 1;
                    }
                  echo "Docker 상태 및 로그 확인 완료."

            # 4. Spring Boot API 상태 확인
            - name: Spring Boot API 상태 확인 (SSM 명령어 실행)
              run: |
                  echo "Spring Boot API 상태 확인 시작..."
                  COMMAND_ID=$(aws ssm send-command \
                    --document-name "AWS-RunShellScript" \
                    --targets "Key=instanceIds,Values=${{ secrets.EC2_INSTANCE_ID }}" \
                    --parameters commands='[
                      "echo ====== Spring Boot API 상태 확인 ======",
                      "curl -s -o /dev/null -w \"%{http_code}\" http://localhost:8080/actuator/health || echo Spring Boot가 응답하지 않습니다."
                    ]' \
                    --comment "Spring Boot API 상태 확인" \
                    --query "Command.CommandId" \
                    --output text)

                  echo "SSM 명령어 실행 ID: $COMMAND_ID"
                  echo "SSM 명령어 완료 대기 중..."
                  aws ssm wait command-executed \
                    --command-id "$COMMAND_ID" \
                    --instance-id "${{ secrets.EC2_INSTANCE_ID }}" || {
                      echo "Spring Boot API 상태 확인 명령어가 실패했습니다. 상세 로그:";
                      aws ssm get-command-invocation \
                        --command-id "$COMMAND_ID" \
                        --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
                        --output text;
                      exit 1;
                    }
                  echo "SSM 명령어 결과 (표준 출력):"
                  aws ssm get-command-invocation \
                    --command-id "$COMMAND_ID" \
                    --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
                    --query "StandardOutputContent" \
                    --output text
                  echo "SSM 명령어 결과 (에러 출력):"
                  aws ssm get-command-invocation \
                    --command-id "$COMMAND_ID" \
                    --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
                    --query "StandardErrorContent" \
                    --output text
                  echo "Spring Boot API 상태 확인 완료."
