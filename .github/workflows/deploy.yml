name: EC2 배포 (SSM 이용)

on:
    push:
        branches:
            - main

permissions:
    id-token: write
    contents: read

jobs:
    deploy:
        runs-on: ubuntu-latest

        steps:
            - name: 리포지토리 체크아웃
              uses: actions/checkout@v3

            - name: AWS 자격 증명 설정
              uses: aws-actions/configure-aws-credentials@v3
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ secrets.AWS_REGION }}

            # 1. EC2 환경 준비 (Docker & Java 설치)
            - name: EC2 환경 준비 (Docker & Java)
              run: |
                  echo "EC2 환경 준비 시작..."
                  COMMAND_ID=$(aws ssm send-command \
                    --document-name "AWS-RunShellScript" \
                    --targets "Key=instanceIds,Values=${{ secrets.EC2_INSTANCE_ID }}" \
                    --parameters 'commands=[
                      "sudo yum update -y",
                      "sudo yum install -y docker docker-compose-plugin java-17-amazon-corretto git",
                      "sudo service docker start",
                      "sudo chkconfig docker on || true",
                      "sudo groupadd docker || true",
                      "sudo usermod -aG docker ec2-user",
                      "mkdir -p /home/ec2-user/app",
                      "sudo chown ec2-user:ec2-user /home/ec2-user/app",
                      "docker --version",
                      "docker compose version || true"
                    ]' \
                    --comment "EC2 환경 준비 (Docker, Java 설치)" \
                    --query "Command.CommandId" \
                    --output text)

                  echo "SSM 명령어 실행 ID: $COMMAND_ID"
                  aws ssm wait command-executed --command-id "$COMMAND_ID" --instance-id "${{ secrets.EC2_INSTANCE_ID }}"

            # 2. 기존 `app` 폴더 삭제 후 다시 클론
            - name: 애플리케이션 배포 및 실행
              run: |
                  echo "애플리케이션 배포 시작..."
                  COMMAND_ID=$(aws ssm send-command \
                    --document-name "AWS-RunShellScript" \
                    --targets "Key=instanceIds,Values=${{ secrets.EC2_INSTANCE_ID }}" \
                    --parameters 'commands=[
                      "cd /home/ec2-user",
                      "rm -rf app",
                      "git clone https://github.com/typingmistake/saekdam-be.git app",
                      "cd /home/ec2-user/app",
                      "chmod +x gradlew",
                      "./gradlew clean build -x test",
                      "[[ -f docker-compose.yml ]] || echo docker-compose.yml 없음!",
                      "sudo docker compose down || echo No containers to stop.",
                      "sudo docker compose up -d",
                      "echo Spring Boot 시작 대기 60초...",
                      "sleep 60"
                    ]' \
                    --comment "애플리케이션 배포 및 실행" \
                    --query "Command.CommandId" \
                    --output text)

                  echo "SSM 명령어 실행 ID: $COMMAND_ID"
                  aws ssm wait command-executed --command-id "$COMMAND_ID" --instance-id "${{ secrets.EC2_INSTANCE_ID }}"

            # 3. Docker 컨테이너 상태 및 Spring Boot 로그 확인
            - name: Docker 컨테이너 상태 및 Spring Boot 로그 확인
              run: |
                  echo "Docker 컨테이너 상태 및 Spring Boot 로그 확인 시작..."
                  COMMAND_ID=$(aws ssm send-command \
                    --document-name "AWS-RunShellScript" \
                    --targets "Key=instanceIds,Values=${{ secrets.EC2_INSTANCE_ID }}" \
                    --parameters 'commands=[
                      "echo 실행 중인 Docker 컨테이너:",
                      "sudo docker ps -a",
                      "echo 최근 실행된 컨테이너 로그:",
                      "for cid in $(sudo docker ps -aq); do echo --- 컨테이너 $cid ---; sudo docker logs $cid --tail 50; echo =================================; done",
                      "echo Docker Compose 실행 오류 확인:",
                      "cd /home/ec2-user/app && sudo docker compose up -d || echo Docker Compose 실행 실패",
                      "echo Spring Boot 컨테이너 로그:",
                      "sudo docker compose logs --tail 50 || echo Spring Boot 컨테이너 없음"
                    ]' \
                    --comment "Docker 컨테이너 상태 및 Spring Boot 로그 확인" \
                    --query "Command.CommandId" \
                    --output text)

                  echo "SSM 명령어 실행 ID: $COMMAND_ID"
                  aws ssm wait command-executed --command-id "$COMMAND_ID" --instance-id "${{ secrets.EC2_INSTANCE_ID }}"

            # 4. Spring Boot API 상태 확인
            - name: Spring Boot API 상태 확인
              run: |
                  echo "Spring Boot API 상태 확인 시작..."
                  COMMAND_ID=$(aws ssm send-command \
                    --document-name "AWS-RunShellScript" \
                    --targets "Key=instanceIds,Values=${{ secrets.EC2_INSTANCE_ID }}" \
                    --parameters 'commands=[
                      "curl -v http://localhost:8080/actuator/health || echo Spring Boot가 응답하지 않습니다."
                    ]' \
                    --comment "Spring Boot API 상태 확인" \
                    --query "Command.CommandId" \
                    --output text)

                  echo "SSM 명령어 실행 ID: $COMMAND_ID"
                  aws ssm wait command-executed --command-id "$COMMAND_ID" --instance-id "${{ secrets.EC2_INSTANCE_ID }}"
