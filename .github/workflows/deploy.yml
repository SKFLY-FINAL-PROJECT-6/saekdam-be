name: EC2 배포 (SSM 이용)

on:
    push:
        branches:
            - main

permissions:
    id-token: write
    contents: read

jobs:
    deploy:
        runs-on: ubuntu-latest

        steps:
            - name: 리포지토리 체크아웃
              uses: actions/checkout@v3

            - name: AWS 자격 증명 설정
              uses: aws-actions/configure-aws-credentials@v3
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ secrets.AWS_REGION }}

            # 1. EC2 환경 준비 (Docker & Java 설치)
            - name: EC2 환경 준비 (Docker & Java)
              run: |
                  echo "EC2 환경 준비 시작..."
                  COMMAND_ID=$(aws ssm send-command \
                    --document-name "AWS-RunShellScript" \
                    --targets "Key=instanceIds,Values=${{ secrets.EC2_INSTANCE_ID }}" \
                    --parameters 'commands=[
                      "sudo yum update -y",
                      "sudo yum install -y docker docker-compose-plugin java-17-amazon-corretto git",
                      "sudo systemctl start docker",
                      "sudo systemctl enable docker",
                      "sudo usermod -aG docker ec2-user",
                      "mkdir -p /home/ec2-user/app",
                      "sudo chown ec2-user:ec2-user /home/ec2-user/app"
                    ]' \
                    --comment "EC2 환경 준비 (Docker, Java 설치)" \
                    --query "Command.CommandId" \
                    --output text)

                  echo "SSM 명령어 실행 ID: $COMMAND_ID"

                  for i in {1..60}; do
                    STATUS=$(aws ssm get-command-invocation --command-id "$COMMAND_ID" --instance-id "${{ secrets.EC2_INSTANCE_ID }}" --query "Status" --output text)
                    echo "현재 상태: $STATUS"
                    if [[ "$STATUS" == "Success" ]]; then
                      echo "✅ SSM 명령 실행 완료"
                      break
                    elif [[ "$STATUS" == "Failed" || "$STATUS" == "Cancelled" ]]; then
                      echo "❌ SSM 명령 실행 실패"
                      exit 1
                    fi
                    sleep 10
                  done

            # 2. 환경 변수 (.env 파일) 생성 및 전송
            - name: 환경 변수 파일 생성 및 업로드
              run: |
                  echo "EC2에서 .env 파일 생성..."
                  COMMAND_ID=$(aws ssm send-command \
                    --document-name "AWS-RunShellScript" \
                    --targets "Key=instanceIds,Values=${{ secrets.EC2_INSTANCE_ID }}" \
                    --parameters 'commands=[
                      "cat <<EOF > /home/ec2-user/app/.env",
                      "DB_HOST=${{ secrets.DB_HOST }}",
                      "DB_PORT=${{ secrets.DB_PORT }}",
                      "DB_NAME=${{ secrets.DB_NAME }}",
                      "DB_USER=${{ secrets.DB_USER }}",
                      "DB_PASSWORD=${{ secrets.DB_PASSWORD }}",
                      "AWS_S3_ACCESS_KEY=${{ secrets.AWS_S3_ACCESS_KEY }}",
                      "AWS_S3_SECRET_KEY=${{ secrets.AWS_S3_SECRET_KEY }}",
                      "AWS_REGION=${{ secrets.AWS_REGION }}",
                      "AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}",
                      "JWT_SECRET=${{ secrets.JWT_SECRET }}",
                      "EOF"
                    ]' \
                    --comment "환경 변수 파일 생성" \
                    --query "Command.CommandId" \
                    --output text)

                  echo "SSM 명령어 실행 ID: $COMMAND_ID"

                  for i in {1..60}; do
                    STATUS=$(aws ssm get-command-invocation --command-id "$COMMAND_ID" --instance-id "${{ secrets.EC2_INSTANCE_ID }}" --query "Status" --output text)
                    echo "현재 상태: $STATUS"
                    if [[ "$STATUS" == "Success" ]]; then
                      echo "✅ SSM 명령 실행 완료"
                      break
                    elif [[ "$STATUS" == "Failed" || "$STATUS" == "Cancelled" ]]; then
                      echo "❌ SSM 명령 실행 실패"
                      exit 1
                    fi
                    sleep 10
                  done

            # 3. Docker Compose 설치 및 검증
            - name: Docker Compose 설치 및 검증
              run: |
                  echo "Docker Compose 설치 및 검증 시작..."
                  COMMAND_ID=$(aws ssm send-command \
                    --document-name "AWS-RunShellScript" \
                    --targets "Key=instanceIds,Values=${{ secrets.EC2_INSTANCE_ID }}" \
                    --parameters 'commands=[
                      "if ! docker compose version &>/dev/null; then",
                      "  echo Docker Compose가 실행되지 않음. 재설치 진행...",
                      "  sudo yum remove -y docker-compose-plugin",
                      "  sudo yum install -y docker-compose-plugin",
                      "  sudo chmod +x /usr/libexec/docker/cli-plugins/docker-compose",
                      "fi",
                      "docker compose version || echo Docker Compose 실행 실패"
                    ]' \
                    --comment "Docker Compose 설치 및 검증" \
                    --query "Command.CommandId" \
                    --output text)

                  echo "SSM 명령어 실행 ID: $COMMAND_ID"

                  for i in {1..60}; do
                    STATUS=$(aws ssm get-command-invocation --command-id "$COMMAND_ID" --instance-id "${{ secrets.EC2_INSTANCE_ID }}" --query "Status" --output text)
                    echo "현재 상태: $STATUS"
                    if [[ "$STATUS" == "Success" ]]; then
                      echo "✅ SSM 명령 실행 완료"
                      break
                    elif [[ "$STATUS" == "Failed" || "$STATUS" == "Cancelled" ]]; then
                      echo "❌ SSM 명령 실행 실패"
                      exit 1
                    fi
                    sleep 10
                  done

            # 4. 애플리케이션 배포 및 실행 (환경 변수 포함)
            - name: 애플리케이션 배포 및 실행
              run: |
                  echo "애플리케이션 배포 시작..."
                  COMMAND_ID=$(aws ssm send-command \
                    --document-name "AWS-RunShellScript" \
                    --targets "Key=instanceIds,Values=${{ secrets.EC2_INSTANCE_ID }}" \
                    --parameters 'commands=[
                      "cd /home/ec2-user",
                      "rm -rf app",
                      "git clone https://github.com/typingmistake/saekdam-be.git app",
                      "cd /home/ec2-user/app",
                      "chmod +x gradlew",
                      "./gradlew clean build -x test",
                      "sudo docker compose --env-file /home/ec2-user/app/.env down || echo No containers to stop.",
                      "sudo docker compose --env-file /home/ec2-user/app/.env up -d",
                      "echo Spring Boot 시작 대기 60초...",
                      "sleep 60"
                    ]' \
                    --comment "애플리케이션 배포 및 실행" \
                    --query "Command.CommandId" \
                    --output text)

                  echo "SSM 명령어 실행 ID: $COMMAND_ID"

                  for i in {1..60}; do
                    STATUS=$(aws ssm get-command-invocation --command-id "$COMMAND_ID" --instance-id "${{ secrets.EC2_INSTANCE_ID }}" --query "Status" --output text)
                    echo "현재 상태: $STATUS"
                    if [[ "$STATUS" == "Success" ]]; then
                      echo "✅ SSM 명령 실행 완료"
                      break
                    elif [[ "$STATUS" == "Failed" || "$STATUS" == "Cancelled" ]]; then
                      echo "❌ SSM 명령 실행 실패"
                      exit 1
                    fi
                    sleep 10
                  done
